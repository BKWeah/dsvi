Project: DSVI Multi-School Website Platform & CMS using Vite, React, Shadcn/ui, and Supabase

Objective:
You are an expert AI Web Developer. Your task is to create a Vite + React application for the Digital School Visibility Initiative (DSVI). This application will serve as a multi-school website platform with a central Admin Panel and a CMS for individual schools. The application will be statically generated (where possible through pre-rendering or client-side rendering of dynamic data) and deployable to static site hosting platforms like Cloudflare Pages. All UI components MUST be built using shadcn/ui. You will be given a basic React component template file (SchoolPageTemplate.tsx or similar, described below) to adapt for the public-facing school websites.

Core Technologies:

Build Tool/Framework: Vite with React (latest stable versions)

Routing: React Router (latest stable version, e.g., v6)

UI Library: shadcn/ui (Ensure all interactive elements and layout components are from shadcn/ui where appropriate)

Styling: Tailwind CSS (as used by shadcn/ui)

Authentication: Supabase Auth

Database & Storage: Supabase (PostgreSQL database with Supabase client library for data, Supabase Storage for file uploads like logos and CMS images)

Deployment Target: Static Site Hosting (e.g., Cloudflare Pages, Netlify, Vercel for static builds).

Provided Existing Template File (src/components/templates/SchoolPageTemplate.tsx - Conceptual):
Assume you have a React component file, let's call it src/components/templates/SchoolPageTemplate.tsx. This file contains the basic JSX structure for a single school page (e.g., a Homepage). It might look something like this conceptually:

// src/components/templates/SchoolPageTemplate.tsx (Conceptual)
// This is NOT the actual file, but a representation of what the AI should adapt.
// The AI will need to make this dynamic.

// Shadcn components would be imported here, e.g.
// import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
// import { Button } from "@/components/ui/button";
// import { School, PageContent } from "@/lib/types"; // Assuming types are defined

interface SchoolPageTemplateProps {
school: School; // Contains schoolName, logoUrl, etc.
pageContent: PageContent; // Contains pageTitle, heroImage, welcomeMessage, sections, etc.
// contactInfo might be part of school or pageContent depending on design
}

export default function SchoolPageTemplate({
school,
pageContent,
}: SchoolPageTemplateProps) {
const { name: schoolName, contactInfo } = school;
const { title: pageTitle, heroImage, welcomeMessage, sections } = pageContent; // Example structure

return (
<div className="container mx-auto p-4">
<header className="mb-8 text-center">
{/* Placeholder for School Logo */}
<img src={school.logoUrl || "/placeholder-logo.png"} alt={${schoolName} Logo} className="mx-auto h-24 w-auto mb-4" />
<h1 className="text-4xl font-bold">{schoolName}</h1>
<p className="text-xl text-muted-foreground">{pageTitle}</p>
</header>

{/* Hero Section (Example) */}
  {heroImage && ( // This would come from a section of type 'hero'
    <div className="mb-8">
      <img src={heroImage} alt="Hero Image" className="w-full h-64 object-cover rounded-lg" />
    </div>
  )}

  {/* Welcome Message (Example) */}
  {/* Replace with Shadcn Card - this would also be a 'text' section */}
  <div className="bg-card p-6 rounded-lg shadow-md mb-8">
    <h2 className="text-2xl font-semibold mb-2">Welcome!</h2>
    <p>{welcomeMessage}</p>
  </div>

  {/* Dynamic Sections (Example) - This is the key part to make dynamic */}
  {sections.map((section, index) => (
    // Replace with appropriate Shadcn components based on section.type
    <div key={section.id || index} className="bg-card p-6 rounded-lg shadow-md mb-8">
      <h3 className="text-xl font-semibold mb-2">{section.config.heading || section.type}</h3>
      {section.config.image && <img src={section.config.image} alt={section.config.heading} className="w-full h-48 object-cover rounded mb-4" />}
      <p>{section.config.body || JSON.stringify(section.config)}</p>
    </div>
  ))}

  {/* Contact Info (Example) */}
  {/* Replace with Shadcn Card */}
  <div className="bg-secondary text-secondary-foreground p-6 rounded-lg shadow-md">
    <h3 className="text-xl font-semibold mb-2">Contact Us</h3>
    <p>Address: {contactInfo.address}</p>
    <p>Phone: {contactInfo.phone}</p>
    <p>Email: <a href={`mailto:${contactInfo.email}`} className="underline">{contactInfo.email}</a></p>
  </div>
   {/* Footer Placeholder */}
  <footer className="mt-12 pt-8 border-t text-center text-muted-foreground">
    <p>Â© {new Date().getFullYear()} {schoolName}. Powered by DSVI.</p>
  </footer>
</div>


);
}

Your primary task is to make this conceptual template dynamic, sourcing data from Supabase, and integrate it into the overall CMS by creating a SchoolPageRenderer.tsx component that iterates through structured content sections.

I. Project Setup & Core Structure:

Initialize Supabase Project:

Go to supabase.com and create a new project.

Under "Database", use the SQL Editor or Table Editor to create your schools and pages tables (schema detailed in Section II).

Enable Row Level Security (RLS) on your tables and define policies. Start with public read access for schools/pages and authenticated user write access for their own data where applicable.

Note your Project URL and anon public key from Project Settings > API.

Initialize Vite + React Project:

npm create vite@latest dsvi-platform -- --template react-ts (or yarn/pnpm equivalent)

cd dsvi-platform

Install Tailwind CSS: Follow the official "Install Tailwind CSS with Vite" guide.

Install React Router: npm install react-router-dom

Install Supabase client: npm install @supabase/supabase-js

Install lucide-react for icons.

Integrate shadcn/ui:

Run npx shadcn-ui@latest init.

Choose default style (e.g., "Default") and base color (e.g., "Slate").

Confirm Tailwind configuration (e.g., tailwind.config.js, globals.css).

Set up components.json correctly for Vite (e.g., aliases: { components: "@/components", utils: "@/lib/utils" }).

Ensure your tsconfig.json has baseUrl: "." and paths: { "@/": ["src/"] }.

Directory Structure (Typical Vite + React):

/dsvi-platform
/public/                          // Static assets (placeholder-logo.png, default-hero.jpg)
/src/
/App.tsx                        // Main app component with React Router setup
/main.tsx                       // Entry point, renders App.tsx
/index.css                      // Or globals.css for Tailwind base styles
/vite-env.d.ts
/components/
/ui/                          // Shadcn UI components (auto-generated)
/custom/                      // Your custom composite components
AdminNavbar.tsx
SchoolNavbar.tsx
Sidebar.tsx                 // For admin panel
PageEditor.tsx              // Core CMS component
ThemeSwitcher.tsx           // (Bonus: for shadcn themes)
ProtectedRoute.tsx          // For handling route protection
/templates/
SchoolPageRenderer.tsx      // Renders dynamic page content based on sections
/hooks/
useAuth.ts                  // Custom hook to access auth context
/contexts/
AuthContext.tsx             // React context for authentication state
/lib/
supabaseClient.ts             // Supabase client initialization
auth.ts                       // Supabase auth functions (login, logout, session)
database.ts                   // Supabase database interaction functions
types.ts                      // TypeScript interfaces for data models
utils.ts                      // Utility functions (e.g., from shadcn/ui)
/pages/                         // Route components
/admin/                       // DSVI Admin Panel (Protected Routes)
AdminLayout.tsx             // Layout for admin section (sidebar, header, content area)
DashboardPage.tsx
SchoolsListPage.tsx
EditSchoolPage.tsx          // Route: /admin/schools/:schoolId/edit
SchoolSettingsPage.tsx      // Route: /admin/schools/:schoolId/settings
UsersPage.tsx               // (Optional: DSVI user management)
/public/                      // Public facing school sites
SchoolLayout.tsx            // Layout for individual school sites (header, nav, footer)
SchoolHomePage.tsx          // Route: /schools/:schoolSlug
SchoolSubPage.tsx           // Route: /schools/:schoolSlug/:pageSlug
LoginPage.tsx
LandingPage.tsx               // Main DSVI landing page (can be simple)
NotFoundPage.tsx
.env.local                       // For Supabase URL and anon key (VITE_SUPABASE_URL, VITE_SUPABASE_ANON_KEY)
vite.config.ts
tailwind.config.js
postcss.config.js
tsconfig.json
// ... other config files
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
IGNORE_WHEN_COPYING_END

Ensure .env.local is in .gitignore.

II. Data Models & Supabase Schema (/lib/types.ts & Supabase Dashboard):
Define TypeScript interfaces in /lib/types.ts. These will map to your Supabase tables. Create corresponding tables in your Supabase project.

User (Managed by Supabase Auth):

Supabase auth.users table handles id, email, encrypted_password, etc.

Custom user data (role, schoolId) will be stored in user_metadata:

// In /lib/types.ts
export interface UserProfile { // Represents data you might fetch alongside Supabase user
id: string; // Supabase user ID
email?: string;
name?: string;
role: 'DSVI_ADMIN' | 'SCHOOL_ADMIN';
school_id?: string; // if SCHOOL_ADMIN, links to School.id
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
TypeScript
IGNORE_WHEN_COPYING_END

School Table (schools):

id: uuid (Primary Key, default gen_random_uuid())

created_at: timestamp with time zone (default now())

updated_at: timestamp with time zone (default now(), auto-updates with trigger)

name: text (not null)

slug: text (unique, not null)

logo_url: text (nullable, URL to image in Supabase Storage)

admin_user_id: uuid (nullable, foreign key to auth.users.id)

theme_settings: jsonb (nullable, e.g., { "primaryColor": "#FFFFFF" })

contact_info: jsonb (nullable, e.g., { "address": "...", "phone": "...", "email": "..." })

// In /lib/types.ts
export interface School {
id: string;
created_at: string;
updated_at: string;
name: string;
slug: string;
logo_url?: string | null;
admin_user_id?: string | null;
theme_settings?: { primaryColor?: string; [key: string]: any };
contact_info?: { address?: string; phone?: string; email?: string; mapEmbedUrl?: string };
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
TypeScript
IGNORE_WHEN_COPYING_END

PageContent Table (pages):

id: uuid (Primary Key, default gen_random_uuid())

created_at: timestamp with time zone (default now())

updated_at: timestamp with time zone (default now(), auto-updates with trigger)

school_id: uuid (not null, Foreign Key to schools.id, on delete cascade)

page_slug: text (not null, e.g., 'homepage', 'about-us'. Unique per school_id)

title: text (not null, Browser tab title / SEO title)

meta_description: text (nullable)

sections: jsonb (Array of ContentSection objects, not null, default [])

// In /lib/types.ts
export interface PageContent {
id: string;
created_at: string;
updated_at: string;
school_id: string;
page_slug: 'homepage' | 'about-us' | 'academics' | 'admissions' | 'faculty' | 'contact' | string; // Allow custom slugs too
title: string;
meta_description?: string | null;
sections: ContentSection[];
}
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
TypeScript
IGNORE_WHEN_COPYING_END

ContentSection Interface (Structure for sections JSONB column):

// In /lib/types.ts
export type SectionType = 'hero' | 'text' | 'textWithImage' | 'gallery' | 'facultyList' | 'contactForm';

export interface ContentSection {
id: string; // UUID, generated client-side when adding a new section
type: SectionType;
config: any; // Type-specific configuration, define interfaces for each
}

// Example config types (define these more rigorously)
export interface HeroSectionConfig { title: string; subtitle?: string; ctaText?: string; ctaLink?: string; imageUrl: string; }
export interface TextSectionConfig { heading?: string; body: string; } // body can be markdown
export interface TextWithImageSectionConfig { heading?: string; body: string; imageUrl: string; imagePosition: 'left' | 'right'; }
export interface GallerySectionConfig { images: Array<{ url: string; alt: string }>; }
export interface FacultyMember { name: string; title: string; bio?: string; imageUrl?: string; }
export interface FacultyListSectionConfig { facultyMembers: Array<FacultyMember>; }
// contactForm might not need config, or just a title
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
TypeScript
IGNORE_WHEN_COPYING_END

Supabase Database Interaction Functions (/lib/database.ts):
These functions will use the Supabase JavaScript client (supabaseClient.ts).

async function getSchools(): Promise<School[]>

async function getSchoolBySlug(slug: string): Promise<{ school: School; pages: PageContent[] } | null>

async function getSchoolById(id: string): Promise<{ school: School; pages: PageContent[] } | null>

async function createSchool(data: Omit<School, 'id'|'created_at'|'updated_at'|'slug'>, adminEmailForNewUser?: string): Promise<School> (Handles slug generation. If adminEmailForNewUser is provided, a new Supabase user should be invited or created, and their ID linked. This might involve a Supabase Edge Function for atomicity or secure user creation).

async function updateSchool(schoolId: string, data: Partial<Omit<School, 'id'|'created_at'|'updated_at'>>): Promise<School>

async function getPageContent(schoolId: string, pageSlug: string): Promise<PageContent | null>

async function upsertPageContent(pageData: Omit<PageContent, 'id'|'created_at'|'updated_at'>): Promise<PageContent> (Creates or updates a page)

async function deletePageContent(pageId: string): Promise<void>

Functions for uploading/managing files in Supabase Storage (e.g., school logos, section images).

III. Authentication (/lib/supabaseClient.ts, /lib/auth.ts, /contexts/AuthContext.tsx):

Supabase Client (/lib/supabaseClient.ts):

import { createClient } from '@supabase/supabase-js';
import { Database } from './types_db'; // If using supabase gen types

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL as string;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY as string;

// export const supabase = createClient(supabaseUrl, supabaseAnonKey);
export const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey); // Use Database generic if types are generated
IGNORE_WHEN_COPYING_START
content_copy
download
Use code with caution.
TypeScript
IGNORE_WHEN_COPYING_END

Run npx supabase gen types typescript --project-id <your-project-id> --schema public > src/lib/types_db.ts to generate types from your Supabase schema for better type safety.

Auth Functions (/lib/auth.ts):

async function signInWithEmailPassword(email, password): Uses supabase.auth.signInWithPassword().

async function signUpWithEmailPassword(email, password, metadata): Uses supabase.auth.signUp(). metadata should include role and potentially school_id for SCHOOL_ADMIN.

async function signOutUser(): Uses supabase.auth.signOut().

async function getCurrentUser(): Uses supabase.auth.getUser().

async function getSession(): Uses supabase.auth.getSession().

function onAuthStateChange(callback): Uses supabase.auth.onAuthStateChange().

(Advanced) async function updateUserRoleAndSchool(userId, role, schoolId): This would typically be a Supabase Edge Function called with admin privileges to securely update user_metadata.

Auth Context (/contexts/AuthContext.tsx):

Create a context to provide session, user, loading state, and auth functions (login, logout, signup) throughout the app.

Use onAuthStateChange to listen to auth events and update the context state.

Fetch user profile/metadata associated with the Supabase user if stored separately or augment the user object.

Login Page (/src/pages/LoginPage.tsx):

Use Shadcn Card, Form (with react-hook-form and zod for validation), Label, Input, Button.

Handle login using signInWithEmailPassword from /lib/auth.ts.

Show errors using Shadcn Alert or useToast.

Protected Routes (/src/components/custom/ProtectedRoute.tsx & React Router setup in App.tsx):

ProtectedRoute component checks auth state from AuthContext.

If not authenticated, redirect to /login.

For role-based access (e.g., /admin/*):

DSVI_ADMIN can access all of /admin/*.

SCHOOL_ADMIN can only access /admin/schools/:schoolId/* where schoolId matches their user_metadata.school_id. This check happens within the ProtectedRoute or at the page/layout level for admin routes.

IV. DSVI Admin Panel (/src/pages/admin/*):

Admin Layout (/src/pages/admin/AdminLayout.tsx):

Wraps admin routes using React Router's <Outlet />.

Use Shadcn ResizablePanelGroup for sidebar and main content area.

Includes <Sidebar /> and <AdminNavbar />.

Sidebar (/src/components/custom/Sidebar.tsx):

Shadcn NavigationMenu or custom list of links (e.g., Dashboard, Schools).

User avatar/name (from AuthContext), logout button (calls signOutUser).

Admin Navbar (/src/components/custom/AdminNavbar.tsx):

Breadcrumbs (use useLocation from React Router and Shadcn Breadcrumb).

Theme switcher (optional).

Dashboard (/src/pages/admin/DashboardPage.tsx):

Fetch and display summary stats from Supabase (total schools, etc.) using Shadcn Card.

School Management (/src/pages/admin/SchoolsListPage.tsx):

Fetch and display list of schools from Supabase using getSchools().

Use Shadcn Table. Columns: School Name, Slug, Admin Email (fetch from Supabase auth.users based on admin_user_id), Actions.

Actions: Shadcn DropdownMenu with "Edit Content", "Settings", "View Public Site" (links using React Router Link or useNavigate).

"Add New School" Button (Shadcn Button) opening a Shadcn Dialog.

Add School Dialog:

Form for School Name, Admin Email (for new SCHOOL_ADMIN user).

On submit:

Call createSchool (from /lib/database.ts).

If an admin email is provided for a new user, call signUpWithEmailPassword (from /lib/auth.ts) with role: 'SCHOOL_ADMIN' and the new school_id in metadata. This might be better handled by a Supabase Edge Function that creates the school and invites the user, linking them transactionally.

Update the admin_user_id on the newly created school record.

V. School Admin CMS View (/src/pages/admin/EditSchoolPage.tsx - Route /admin/schools/:schoolId/edit):

Page uses AdminLayout. schoolId from useParams().

Verify user is DSVI_ADMIN or SCHOOL_ADMIN for this schoolId.

Display "Editing: [School Name]" (fetch school details).

Page Selection: Shadcn Tabs or Select to switch between page_slugs ('homepage', 'about-us', etc.).

Content Editor (/src/components/custom/PageEditor.tsx):

Props: schoolId, activePageSlug.

Fetches PageContent using getPageContent(schoolId, activePageSlug).

If no page exists, initialize an empty structure for creation.

Inputs for PageContent.title and PageContent.metaDescription.

Section-based Editing:

Iterate through PageContent.sections. Render an editor UI for each section.type using Shadcn Card.

CardHeader: Section Type, Reorder buttons (e.g., lucide-react arrows), Delete button.

CardContent: Form fields for section.config (Inputs, Textarea, RadioGroup, FileUpload to Supabase Storage for images).

hero: Inputs for title, subtitle, CTA, image URL (upload to Supabase Storage).

text: Input for heading, Textarea for body (consider a simple markdown editor or react-markdown for preview).

textWithImage: Similar to text + image URL + imagePosition RadioGroup.

gallery: UI to add/remove/reorder images (upload to Supabase Storage).

facultyList: UI to add/remove/edit faculty members (Dialog for adding/editing).

"Add Section" Button: Shadcn DropdownMenu to select SectionType, then adds a new section (with a client-generated UUID for id) to the sections array in local state.

Save Button: Shadcn Button. On click, call upsertPageContent() with the modified PageContent. Show toast on success/error.

VI. School Settings (/src/pages/admin/SchoolSettingsPage.tsx - Route /admin/schools/:schoolId/settings):

Page uses AdminLayout. schoolId from useParams().

Form (Shadcn Form, Card) to edit School.name, School.logo_url (upload to Supabase Storage), School.theme_settings.primaryColor (Select or ColorPicker), School.contact_info.

Save using updateSchool().

VII. Public School Websites (/src/pages/public/*):

Dynamic Routes (React Router in App.tsx):

/schools/:schoolSlug -> SchoolHomePage.tsx

/schools/:schoolSlug/:pageSlug -> SchoolSubPage.tsx

Data Fetching: In SchoolHomePage.tsx and SchoolSubPage.tsx:

Use useParams() to get schoolSlug and pageSlug.

In useEffect, fetch data:

schoolData = await getSchoolBySlug(schoolSlug) (fetches school and all its pages).

Find the specific pageContent from schoolData.pages based on pageSlug (or 'homepage').

Handle loading (Shadcn Skeleton) and error states (Shadcn Alert).

If not found, render a "Not Found" message or redirect to a 404 page.

School Layout (/src/pages/public/SchoolLayout.tsx):

Wraps public school pages using <Outlet />.

Fetches basic school info (name, logo) based on schoolSlug from params.

Includes <SchoolNavbar /> (links to different pageSlugs for that school) and a footer.

School Page Renderer (/src/components/templates/SchoolPageRenderer.tsx):

Props: school: School, pageContent: PageContent.

Displays school header (logo, name, page title - from pageContent.title).

Iterates through pageContent.sections. For each section:

Render appropriate Shadcn UI components based on section.type and data from section.config.

E.g., hero -> Full-width image, text overlay; text -> Card with heading/paragraph; textWithImage -> Card with responsive layout; gallery -> Image grid/carousel.

Displays contact info and footer.

Ensure responsiveness.

SEO:

Use react-helmet-async library. In SchoolHomePage.tsx and SchoolSubPage.tsx, dynamically set <title> and <meta name="description"> based on fetched school.name, pageContent.title, and pageContent.metaDescription.

VIII. Deployment & Static Site Generation (SSG) Considerations with Vite:

Static Build: npm run build (or vite build) creates static assets in /dist.

Deployment to Static Hosting: Connect your Git repository to a static hosting platform like Cloudflare Pages, Netlify, or Vercel. Configure the build command (npm run build or vite build) and the output directory (dist).

Pre-rendering Dynamic Routes (for improved SEO & Perf):

Vite itself builds a Single Page Application (SPA). For true SSG of dynamic routes like /schools/:slug/:page:

Option 1 (Simpler, Client-Side Rendering Fallback): Deploy as an SPA. Search engines might still index, but initial content load depends on JavaScript. Public pages will fetch their data client-side on load.

Option 2 (Advanced Pre-rendering during build): Use a Vite plugin like vite-plugin-ssr (Vike) or a custom build script. This script would:

Fetch all school slugs and their page slugs from Supabase.

For each unique path, render the React component to an HTML string (e.g., using ReactDOMServer.renderToStaticMarkup).

Save these HTML files in the dist folder matching their route structure.

This prompt will assume Option 1 for initial simplicity unless full pre-rendering is explicitly requested as a follow-up. The AI should focus on a functional SPA first where public pages load data dynamically.

Content Updates:

When content is updated in Supabase via the CMS, the statically deployed site will not auto-update.

A new build and deployment must be triggered (e.g., by pushing a commit, or manually in the hosting platform's dashboard) to reflect changes.

Image Handling:

Static assets in /public are handled by Vite.

Dynamic images (logos, CMS content images) are uploaded to Supabase Storage. The application will use the public URLs from Supabase Storage in <img> tags.

IX. Step-by-Step Implementation Guidance for AI:

Supabase Setup: Create Supabase project, define schools and pages tables with RLS. Note API keys.

Vite Project Init: create-vite, install Tailwind, React Router, Supabase client, shadcn/ui. Set up tsconfig.json paths and .env.local.

Supabase Client & Types: /lib/supabaseClient.ts, /lib/types.ts (and types_db.ts if generated).

Auth Core: /lib/auth.ts, /contexts/AuthContext.tsx, App.tsx wrapped with AuthProvider. Create LoginPage.tsx.

Routing & Protected Routes: Set up basic routes in App.tsx. Implement ProtectedRoute.tsx.

Admin Panel Shell: AdminLayout.tsx, Sidebar.tsx, AdminNavbar.tsx. Basic DashboardPage.tsx.

School Listing (Admin): SchoolsListPage.tsx (fetch & display schools).

Add School (Admin): Dialog in SchoolsListPage.tsx to create school & (optionally, simplified first) assign existing admin or plan for admin user creation flow.

Public Site Shell: SchoolLayout.tsx. Basic SchoolHomePage.tsx and SchoolSubPage.tsx fetching data client-side.

SchoolPageRenderer.tsx: Implement rendering for 1-2 section types (e.g., 'hero', 'text') using Shadcn.

CMS Core (EditSchoolPage.tsx & PageEditor.tsx):

Fetch/display page content for editing.

Implement editing UI for the same 1-2 section types.

Implement "Save Page" to upsertPageContent.

School Settings Page (SchoolSettingsPage.tsx): Form to edit school details, save to Supabase.

Expand Section Types: Iteratively add more section types to SchoolPageRenderer and PageEditor.

Image Uploads: Integrate Supabase Storage for logo and section images.

SEO: Add react-helmet-async for dynamic titles/meta tags on public pages.

Refinement: Error handling, loading states, toasts, responsiveness, RLS policies in Supabase.

Key Reminders for AI:

USE SHADCN/UI EXCLUSIVELY for UI components where applicable. Import them correctly from your @/components/ui alias.

Supabase Interactions: All calls to Supabase are asynchronous (async/await). Handle errors and loading states.

RLS (Row Level Security): Emphasize that RLS policies must be set up in Supabase for data security. For example, users should only be able to update schools/pages they are admins for.

Client-Side Data Fetching: For public pages, data is fetched client-side in useEffect. For admin pages, similar patterns apply.

State Management: Use React's useState, useReducer, and Context API for state. For complex server state, react-query or SWR could be considered but are not required for this initial phase.

Modularity: Break down components into smaller, reusable pieces.

Error Handling & User Feedback: Use Shadcn Alert, Toast for feedback.

Environment Variables: Use import.meta.env.VITE_SUPABASE_URL for Supabase credentials.